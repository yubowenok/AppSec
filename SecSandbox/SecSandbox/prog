// macros that holds the maximum state and edge supported
ALLOC MAX_EDGE
SET MAX_EDGE 1000
ALLOC MAX_STATE
SET MAX_STATE 100
ALLOC MAX_TAPE
SET MAX_TAPE 10000
ALLOC MID_TAPE
SET MID_TAPE 5000	// middle of the tape, so that we have left/right movement space

// create static space for storing edge and states
ALLOC edge_rsym[MAX_EDGE]
ALLOC edge_wsym[MAX_EDGE]
ALLOC edge_targ[MAX_EDGE]
ALLOC state_type[MAX_STATE]
ALLOC tape[MAX_TAPE]

// read in the DFA's numbers of symbols and states
ALLOC numSym
RD numSym
ALLOC numState
RD numState

ALLOC state_edgeidx[numState]	// the start point that stores this state's edge
ALLOC state_numedge[numState]	// the number of edges for one state

// two-level loops that read in all the edges of the DFA
ALLOC curIndex
ALLOC i
ALLOC j
ALLOC typeState
ALLOC numEdge
SET curIndex 0
SET i 0
JPT lpState
// for one state, read in its type, edge number and the edges and store them in the static edge array
	RD typeState
	RD numEdge
	SET state_type[i] typeState
	SET state_edgeidx[i] curIndex
	SET state_numedge[i] numEdge
	SET j 0
	JE 7 numEdge 0		// skip no edge state reading stage
	JPT lpStateEdge
		RD edge_rsym[curIndex]
		RD edge_wsym[curIndex]
		RD edge_targ[curIndex]
		INC curIndex
		INC j
	JL lpStateEdge j numEdge
	INC i
JL lpState i numState
DEALLOC i
DEALLOC j
DEALLOC numEdge
DEALLOC curIndex
DEALLOC typeState
// end of two-level loops

// read in start and end states
ALLOC startState
RD startState
ALLOC endState
RD endState

// read in the tape's length and start location
ALLOC lenTape
RD lenTape
ALLOC startTape
RD startTape
ADD startTape MID_TAPE // adjust middle point

// read in tape data
ALLOC i
ALLOC j
SET i 0
JPT lpReadTape
	SET j i
	ADD j MID_TAPE
	RD tape[j]
	INC i
JL lpReadTape i lenTape
DEALLOC i
DEALLOC j

// start turing machine
ALLOC curTape	// current tape location
SET curTape startTape
ALLOC curState	// current state
SET curState startState

ALLOC i
ALLOC j
ALLOC curIndex // index in the edge list
ALLOC curSym // current symbol
ALLOC numEdge // number of outward edges of a state
ALLOC type // state type
ALLOC nextState	// the trasition target state
ALLOC nextSymbol // symbol to write out
ALLOC left	// leftmost tape point
ALLOC right // rightmost tape point
SET left 0
SET right lenTape
ADD left MID_TAPE		// middle adjustment
ADD right MID_TAPE

ALLOC fail
SET fail 0
// check if we move out of range (memory only supports limited tape length)
JPT noMem
	JE 3 fail 0	// skip no memory failure lines
	PRT -1
	EXIT

JPT lpTM	// keep TM running

	JGE 3 curTape right // right side expanded	
	JL 6 curTape left	// left side expanded
	JMP 11				// skip tape filling
	JGE 6 curTape MAX_TAPE	// check if tape moves out of right bound
	SET right curTape
	INC right
	JMP 6				// skip left bound check
	JL 3 curTape 0			// check if tape moves out of left bound
	SET left curTape	
	JMP 3			// expand the tape
	SET fail 1		// we have no more memory to support tape
	JMP noMem
	SET tape[curTape] 0	// we are still in bound, then fill the expanded tape

	SET curIndex state_edgeidx[curState]
	SET numEdge state_numedge[curState]
	SET curSym tape[curTape]

	JE 10 numEdge 0	// this state has no edge
	SET i 0
	JPT lpEdge
		SET j curIndex
		ADD j i
		SET nextState edge_targ[j]		// get the edge's target state
		SET nextSymbol edge_wsym[j]	// symbol to be written to tape
		JE 4 curSym edge_rsym[j]	// the current symbol matches
		INC i
	JL lpEdge i numEdge
	JMP 5						// no edge matches, we just move
	SET curState nextState		// symbol matches
	SET tape[curTape] nextSymbol

	// no edge matches, just move
	SET type state_type[curState]
	JE 3 type 0
	INC curTape
JNE lpTM curState endState	// TM runs until we reach the end state
	DEC curTape
JNE lpTM curState endState	// TM runs until we reach the end state

DEALLOC curIndex
DEALLOC curSym
DEALLOC numEdge
DEALLOC type
DEALLOC i
DEALLOC j
DEALLOC nextState
DEALLOC nextSymbol

// output the tape segments specified by the TM
ALLOC numSeg
RD numSeg
ALLOC i
ALLOC j
ALLOC t
ALLOC l
JE 15 numSeg 0
SET i 0
JPT lpOutSeg
	RD t		// read segment start
	RD l		// read segment length
	SET j t
	ADD j MID_TAPE	// middle adjustment
	ADD l t
	ADD l MID_TAPE
	JPT lpPrint
		PRT tape[j]
		INC j
	JL lpPrint j l
	INC i
JL lpOutSeg i numSeg

// program ends